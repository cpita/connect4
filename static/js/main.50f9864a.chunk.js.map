{"version":3,"sources":["Components/Cell.js","Components/Board.js","Components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","getTokenStyles","gameState","isWinningCell","opacity","className","onClick","handleClick","column","style","pointerEvents","allowedEvents","value","Board","play","bind","this","turn","aiPlayer","fetchAIMove","board","i","length","isBoardTerminal","winningCells","getWinningCells","updateState","j","Math","abs","join","url","algorithm","difficulty","Axios","get","then","response","data","action","catch","err","console","log","Array","map","arr","JSON","stringify","includes","row","renderBoard","React","Component","Control","handlePlayer","handleAlgorithm","handleDifficulty","e","parseInt","target","onChange","type","min","max","handleReset","message","App","state","initBoard","isAiThinking","resetState","push","setState","getMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"4QAEe,SAASA,EAAKC,GAEzB,IAYMC,EAAiB,WACnB,MAAuB,YAApBD,EAAME,WAA2BF,EAAMG,cAAsB,CAC5DC,QAAS,KAEN,CACHA,QAAS,QAUjB,OACI,yBAAKC,UAAU,OAAOC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,SAASC,MAN/D,CACHC,cAAmC,YAApBV,EAAME,WAA2BF,EAAMW,cAAgB,OAAQ,SAtB/D,IAAhBX,EAAMY,MAED,yBAAKP,UAAU,MAAMI,MAAOR,OAEV,IAAjBD,EAAMY,MAEP,yBAAKP,UAAU,QAAQI,MAAOR,WAFhC,G,qBCLOY,E,kDAEjB,WAAYb,GAAO,IAAD,8BACd,cAAMA,IACDc,KAAO,EAAKA,KAAKC,KAAV,gBAFE,E,iEAMXC,KAAKhB,MAAMiB,OAASD,KAAKhB,MAAMkB,UAAqC,YAAzBF,KAAKhB,MAAME,WACrDc,KAAKG,gB,2BAIRX,GAGD,IAFA,IAAMY,EAAQJ,KAAKhB,MAAMoB,MACrBC,EAAID,EAAME,OAAS,EACjBD,GAAK,GACe,IAArBD,EAAMC,GAAGb,IACZa,IAEF,IAAU,IAAPA,EAEH,GADAD,EAAMC,GAAGb,GAAUQ,KAAKhB,MAAMiB,KAC3BD,KAAKO,gBAAgBH,GAAO,CAC3B,IAAMI,EAAeR,KAAKS,gBAAgBL,GACf,IAAxBI,EAAaF,OACZN,KAAKhB,MAAM0B,YAAYN,EAAO,UAAW,IAEzCJ,KAAKhB,MAAM0B,YAAYN,EAAO,UAAWI,QAG7CR,KAAKhB,MAAM0B,YAAYN,EAAO,UAAW,M,sCAIjCA,GAKZ,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAAmF,IAAhFC,KAAKC,IAAIT,EAAMC,GAAGM,GAAKP,EAAMC,GAAGM,EAAI,GAAKP,EAAMC,GAAGM,EAAI,GAAKP,EAAMC,GAAGM,EAAI,IACvE,MAAO,CAAC,CAACN,EAAGM,GAAI,CAACN,EAAGM,EAAI,GAAI,CAACN,EAAGM,EAAI,GAAI,CAACN,EAAGM,EAAI,IAK5D,IAAI,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAAmF,IAAhFC,KAAKC,IAAIT,EAAMC,GAAGM,GAAKP,EAAMC,EAAI,GAAGM,GAAKP,EAAMC,EAAI,GAAGM,GAAKP,EAAMC,EAAI,GAAGM,IACvE,MAAO,CAAC,CAACN,EAAGM,GAAI,CAACN,EAAI,EAAGM,GAAI,CAACN,EAAI,EAAGM,GAAI,CAACN,EAAI,EAAGM,IAK5D,IAAI,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAA+F,IAA5FC,KAAKC,IAAIT,EAAMC,GAAGM,GAAKP,EAAMC,EAAI,GAAGM,EAAI,GAAKP,EAAMC,EAAI,GAAGM,EAAI,GAAKP,EAAMC,EAAI,GAAGM,EAAI,IACnF,MAAO,CAAC,CAACN,EAAGM,GAAI,CAACN,EAAI,EAAGM,EAAI,GAAI,CAACN,EAAI,EAAGM,EAAI,GAAI,CAACN,EAAI,EAAGM,EAAI,IAKxE,IAAI,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAA+F,IAA5FC,KAAKC,IAAIT,EAAMC,GAAGM,GAAKP,EAAMC,EAAI,GAAGM,EAAI,GAAKP,EAAMC,EAAI,GAAGM,EAAI,GAAKP,EAAMC,EAAI,GAAGM,EAAI,IACnF,MAAO,CAAC,CAACN,EAAGM,GAAI,CAACN,EAAI,EAAGM,EAAI,GAAI,CAACN,EAAI,EAAGM,EAAI,GAAI,CAACN,EAAI,EAAGM,EAAI,IAKxE,MAAO,K,sCAGKP,GACZ,GAAGJ,KAAKS,gBAAgBL,GAAOE,OAAS,EAAG,OAAO,EAClD,IAAI,IAAID,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAC7B,IAAI,IAAIM,EAAI,EAAGA,EAAIP,EAAMC,GAAGC,OAAQK,IAChC,GAAmB,IAAhBP,EAAMC,GAAGM,GAAU,OAAO,EAGrC,OAAO,I,oCAKP,IAFU,IAAD,OACLP,EAAQ,GACJC,EAAI,EAAGA,EAAIL,KAAKhB,MAAMoB,MAAME,OAAQD,IAC1CD,GAASJ,KAAKhB,MAAMoB,MAAMC,GAAGS,KAAK,KAAO,IAE3C,IACMC,EAAG,UADI,yCACJ,kBAAoBX,EAApB,sBAAuCJ,KAAKhB,MAAMgC,UAAlD,uBAA0EhB,KAAKhB,MAAMiC,YAC9FC,IAAMC,IAAIJ,GACTK,MAAK,SAAAC,GACJ,OAAOA,EAASC,QAEjBF,MAAK,SAAAE,GACJ,EAAKxB,KAAKwB,EAAKC,WACdC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,oCAMhB,IADA,IAAMrB,EAAQwB,MAAM,GACZvB,EAAI,EAAGA,EAAIL,KAAKhB,MAAMoB,MAAME,OAAQD,IAAI,CAC5CD,EAAMC,GAAKuB,MAAM,GACjB,IAAI,IAAIjB,EAAI,EAAGA,EAAIX,KAAKhB,MAAMoB,MAAMC,GAAGC,OAAQK,IAC3CP,EAAMC,GAAGM,GACL,kBAAC5B,EAAD,CAAMY,cAAeK,KAAKhB,MAAMiB,OAASD,KAAKhB,MAAMkB,SAAUf,cAAea,KAAKhB,MAAMwB,aAAaqB,KAAI,SAAAC,GAAG,OAAIC,KAAKC,UAAUF,MAAMG,SAASF,KAAKC,UAAU,CAAC3B,EAAGM,KAAMzB,UAAWc,KAAKhB,MAAME,UAAWU,MAAOI,KAAKhB,MAAMoB,MAAMC,GAAGM,GAAIuB,IAAK7B,EAAGb,OAAQmB,EAAGpB,YAAaS,KAAKF,OAIxR,OAAOM,I,+BAIP,OACI,yBAAKf,UAAU,SACVW,KAAKmC,mB,GAtHaC,IAAMC,WCFpBC,E,kDAEjB,WAAYtD,GAAO,IAAD,8BACd,cAAMA,IACDuD,aAAe,EAAKA,aAAaxC,KAAlB,gBACpB,EAAKyC,gBAAkB,EAAKA,gBAAgBzC,KAArB,gBACvB,EAAK0C,iBAAmB,EAAKA,iBAAiB1C,KAAtB,gBAJV,E,yDAOL2C,GACT1C,KAAKhB,MAAMuD,aAAaI,SAASD,EAAEE,OAAOhD,U,sCAG9B8C,GACZ1C,KAAKhB,MAAMwD,gBAAgBE,EAAEE,OAAOhD,S,uCAGvB8C,GACb1C,KAAKhB,MAAMyD,iBAAiBE,SAASD,EAAEE,OAAOhD,U,+BAI9C,OACI,yBAAKP,UAAU,WACX,4CAEI,4BAAQO,MAAOI,KAAKhB,MAAMkB,SAAU2C,SAAU7C,KAAKuC,cAC/C,4BAAQ3C,MAAO,GAAf,YACA,4BAAQA,OAAQ,GAAhB,cAGR,0CAEI,4BAAQA,MAAOI,KAAKhB,MAAMgC,UAAW6B,SAAU7C,KAAKwC,iBAChD,4BAAQ5C,MAAM,QAAd,2BACA,4BAAQA,MAAM,MAAd,+BAGR,2CAEI,2BAAOkD,KAAK,QAAQC,IAAK,EAAGC,IAAK,EAAGpD,MAAOI,KAAKhB,MAAMiC,WAAY4B,SAAU7C,KAAKyC,oBAErF,4BAAQnD,QAASU,KAAKhB,MAAMiE,aAA5B,WACA,4BAAKjD,KAAKhB,MAAMkE,c,GA3CKd,IAAMC,WCGtBc,E,kDAEnB,WAAYnE,GAAO,IAAD,8BAChB,cAAMA,IACDoE,MAAQ,CACXhD,MAAO,EAAKiD,YACZpD,KAAM,EACNf,UAAW,UACXsB,aAAc,GACdQ,UAAW,OACXd,UAAW,EACXe,WAAY,EACZqC,cAAc,GAGhB,EAAKC,WAAa,EAAKA,WAAWxD,KAAhB,gBAbF,E,wDAkBhB,IADA,IAAMK,EAAQ,GACNC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxBD,EAAMoD,KAAK,IACX,IAAI,IAAI7C,EAAI,EAAGA,EAAI,EAAGA,IACpBP,EAAMC,GAAGmD,KAAK,GAGlB,OAAOpD,I,mCAGI,IAAD,OACVJ,KAAKyD,UAAS,iBAAO,CACnBrD,MAAO,EAAKiD,YACZpD,KAAM,EACNf,UAAW,UACXsB,aAAc,S,mCAKhB,MAA4B,YAAzBR,KAAKoD,MAAMlE,UAC0B,IAAnCc,KAAKoD,MAAM5C,aAAaF,OAAqB,MAC7CN,KAAKoD,MAAMhD,MAAMJ,KAAKoD,MAAM5C,aAAa,GAAG,IAAIR,KAAKoD,MAAM5C,aAAa,GAAG,MAAQR,KAAKoD,MAAMlD,SAAiB,QAC3G,UAENF,KAAKoD,MAAMnD,OAASD,KAAKoD,MAAMlD,SAAiB,mBAC5C,qB,+BAGA,IAAD,OACN,OACE,yBAAKb,UAAU,aACb,kBAAC,EAAD,CAAO2B,UAAWhB,KAAKoD,MAAMpC,UAAWC,WAAYjB,KAAKoD,MAAMnC,WAAYf,SAAUF,KAAKoD,MAAMlD,SAAUM,aAAcR,KAAKoD,MAAM5C,aAActB,UAAWc,KAAKoD,MAAMlE,UAAWe,KAAMD,KAAKoD,MAAMnD,KAAMG,MAAOJ,KAAKoD,MAAMhD,MAAOM,YAAa,SAACN,EAAOlB,EAAWsB,GAAnB,OAAoC,EAAKiD,UAAS,SAAAL,GAAK,MAAK,CAAChD,MAAOA,EAAOH,MAAqB,EAAfmD,EAAMnD,KAAaf,UAAWA,EAAWsB,aAAcA,SACvX,kBAAC,EAAD,CAAS0C,QAASlD,KAAK0D,aAAcxE,UAAWc,KAAKoD,MAAMlE,UAAW8B,UAAWhB,KAAKoD,MAAMpC,UAAWC,WAAYjB,KAAKoD,MAAMnC,WAAYf,SAAUF,KAAKoD,MAAMlD,SAAU+C,YAAajD,KAAKuD,WAAYhB,aAAc,SAAArC,GAAQ,OAAI,EAAKuD,UAAS,iBAAO,CAACvD,SAAUA,OAAasC,gBAAiB,SAAAxB,GAAS,OAAI,EAAKyC,UAAS,iBAAO,CAACzC,UAAWA,OAAcyB,iBAAkB,SAAAxB,GAAU,OAAI,EAAKwC,UAAS,iBAAO,CAACxC,WAAYA,c,GApDpYmB,IAAMC,WCOnBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAkD,GACLhD,QAAQgD,MAAMA,EAAMxB,c","file":"static/js/main.50f9864a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Cell(props){\n\n    const renderToken = () => {\n        if(props.value === 1){\n            return (\n                <div className='red' style={getTokenStyles()}></div>\n            )\n        }else if(props.value === -1){\n            return (\n                <div className='black' style={getTokenStyles()}></div>\n            )\n        }\n    }\n\n    const getTokenStyles = () => {\n        if(props.gameState === 'RUNNING' || props.isWinningCell) return {\n            opacity: '1'\n        }\n        return {\n            opacity: '0.5'\n        }\n    }\n\n    const getCellStyles = () => {\n        return {\n            pointerEvents: props.gameState === 'RUNNING' && props.allowedEvents ? 'auto': 'none',\n        }\n    }\n\n    return (\n        <div className='Cell' onClick={() => props.handleClick(props.column)} style={getCellStyles()}>\n            {renderToken()}\n        </div>\n    )\n}","import React from 'react'\nimport Cell from './Cell'\nimport Axios from 'axios'\n\nexport default class Board extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.play = this.play.bind(this)\n    }\n\n    componentDidUpdate(){\n        if(this.props.turn === this.props.aiPlayer && this.props.gameState === 'RUNNING'){\n            this.fetchAIMove()\n        }\n      }\n    \n    play(column){\n        const board = this.props.board\n        let i = board.length - 1;\n        while(i >= 0){\n          if(board[i][column] === 0) break\n          i --\n        }\n        if(i === -1) return\n        board[i][column] = this.props.turn\n        if(this.isBoardTerminal(board)){\n            const winningCells = this.getWinningCells(board)\n            if(winningCells.length === 0){\n                this.props.updateState(board, 'STOPPED', [])\n            } else{\n                this.props.updateState(board, 'STOPPED', winningCells)\n            }\n        }else {\n            this.props.updateState(board, 'RUNNING', [])\n        }\n    }\n\n    getWinningCells(board){\n        /*\n        Returns array of cells with the winning move\n        If there's a tie or the game hasn't finished, returns empty array\n        */\n        for(let i = 0; i < 6; i++){\n            for(let j = 0; j < 4; j++){\n                if(Math.abs(board[i][j] + board[i][j + 1] + board[i][j + 2] + board[i][j + 3]) === 4){\n                    return [[i, j], [i, j + 1], [i, j + 2], [i, j + 3]]\n                }\n            }\n        }\n\n        for(let i = 0; i < 3; i++){\n            for(let j = 0; j < 7; j++){\n                if(Math.abs(board[i][j] + board[i + 1][j] + board[i + 2][j] + board[i + 3][j]) === 4){\n                    return [[i, j], [i + 1, j], [i + 2, j], [i + 3, j]]\n                }\n            }\n        }\n\n        for(let i = 0; i < 3; i++){\n            for(let j = 0; j < 4; j++){\n                if(Math.abs(board[i][j] + board[i + 1][j + 1] + board[i + 2][j + 2] + board[i + 3][j + 3]) === 4){\n                    return [[i, j], [i + 1, j + 1], [i + 2, j + 2], [i + 3, j + 3]]\n                }\n            }\n        }\n\n        for(let i = 0; i < 3; i++){\n            for(let j = 3; j < 7; j++){\n                if(Math.abs(board[i][j] + board[i + 1][j - 1] + board[i + 2][j - 2] + board[i + 3][j - 3]) === 4){\n                    return [[i, j], [i + 1, j - 1], [i + 2, j - 2], [i + 3, j - 3]]\n                }\n            }\n        }\n\n        return []\n    }\n\n    isBoardTerminal(board){\n        if(this.getWinningCells(board).length > 0) return true\n        for(let i = 0; i < board.length; i++){\n            for(let j = 0; j < board[i].length; j++){\n                if(board[i][j] === 0) return false\n            }\n        }\n        return true\n    }\n\n    fetchAIMove(){\n        let board = ''\n        for(let i = 0; i < this.props.board.length; i++){\n          board += this.props.board[i].join(',') + ','\n        }\n        const host = 'https://connect4-carlos.herokuapp.com/'\n        const url = `${host}?board=${board}&algorithm=${this.props.algorithm}&difficulty=${this.props.difficulty}`\n        Axios.get(url)\n        .then(response => {\n          return response.data\n        })\n        .then(data => {\n          this.play(data.action)\n        }).catch(err => {\n            console.log(err)\n        })\n      }\n    \n    renderBoard(){\n        const board = Array(6)\n        for(let i = 0; i < this.props.board.length; i++){\n            board[i] = Array(7)\n            for(let j = 0; j < this.props.board[i].length; j++){\n                board[i][j] = (\n                    <Cell allowedEvents={this.props.turn !== this.props.aiPlayer} isWinningCell={this.props.winningCells.map(arr => JSON.stringify(arr)).includes(JSON.stringify([i, j]))} gameState={this.props.gameState} value={this.props.board[i][j]} row={i} column={j} handleClick={this.play}/>\n                )\n            }\n        }\n        return board\n    }\n    \n    render(){\n        return (\n            <div className=\"Board\">\n                {this.renderBoard()}\n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default class Control extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.handlePlayer = this.handlePlayer.bind(this)\n        this.handleAlgorithm = this.handleAlgorithm.bind(this)\n        this.handleDifficulty = this.handleDifficulty.bind(this)\n    }\n\n    handlePlayer(e){\n        this.props.handlePlayer(parseInt(e.target.value))\n    }\n\n    handleAlgorithm(e){\n        this.props.handleAlgorithm(e.target.value)\n    }\n\n    handleDifficulty(e){\n        this.props.handleDifficulty(parseInt(e.target.value))\n    }\n    \n    render(){\n        return(\n            <div className='Control'>\n                <div>\n                    AI plays as: \n                    <select value={this.props.aiPlayer} onChange={this.handlePlayer}>\n                        <option value={1}>Player 1</option>\n                        <option value={-1}>Player 2</option>\n                    </select>\n                </div>\n                <div>\n                    Algorithm:\n                    <select value={this.props.algorithm} onChange={this.handleAlgorithm}>\n                        <option value='mcts'>Monte Carlo Tree Search</option>\n                        <option value='ab'>Minimax with A&B Prunning</option>\n                    </select>\n                </div>\n                <div>\n                    Difficulty:\n                    <input type='range' min={1} max={5} value={this.props.difficulty} onChange={this.handleDifficulty}/>\n                </div>\n                <button onClick={this.props.handleReset}>Restart</button>\n                <h1>{this.props.message}</h1>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Board from './Components/Board'\nimport Control from './Components/Control'\n\nexport default class App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      board: this.initBoard(),\n      turn: 1,\n      gameState: 'RUNNING',\n      winningCells: [],\n      algorithm: 'mcts',\n      aiPlayer: -1,\n      difficulty: 1,\n      isAiThinking: false\n    }\n\n    this.resetState = this.resetState.bind(this)\n  }\n\n  initBoard(){\n    const board = []\n    for(let i = 0; i < 6; i++){\n      board.push([])\n      for(let j = 0; j < 7; j++){\n        board[i].push(0)\n      }\n    }\n    return board\n  }\n\n  resetState(){\n    this.setState(() => ({\n      board: this.initBoard(),\n      turn: 1,\n      gameState: 'RUNNING',\n      winningCells: []\n    }))\n  }\n\n  getMessage(){\n    if(this.state.gameState === 'STOPPED'){\n      if(this.state.winningCells.length === 0) return 'Tie'\n      if(this.state.board[this.state.winningCells[0][0]][this.state.winningCells[0][1]] === this.state.aiPlayer) return 'I win'\n      return 'You win'\n    }\n    if(this.state.turn === this.state.aiPlayer) return 'I am thinking...'\n    return 'Your turn, human'\n  }\n\n  render(){\n    return (\n      <div className='container'>\n        <Board algorithm={this.state.algorithm} difficulty={this.state.difficulty} aiPlayer={this.state.aiPlayer} winningCells={this.state.winningCells} gameState={this.state.gameState} turn={this.state.turn} board={this.state.board} updateState={(board, gameState, winningCells) => this.setState(state => ({board: board, turn: state.turn * (-1), gameState: gameState, winningCells: winningCells}))}/>\n        <Control message={this.getMessage()} gameState={this.state.gameState} algorithm={this.state.algorithm} difficulty={this.state.difficulty} aiPlayer={this.state.aiPlayer} handleReset={this.resetState} handlePlayer={aiPlayer => this.setState(() => ({aiPlayer: aiPlayer}))} handleAlgorithm={algorithm => this.setState(() => ({algorithm: algorithm}))} handleDifficulty={difficulty => this.setState(() => ({difficulty: difficulty}))}/>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}